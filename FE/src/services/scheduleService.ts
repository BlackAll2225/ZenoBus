import adminApi from './adminApi';
import { ApiResponse, PaginatedResponse } from './types';

export interface Schedule {
  id: number;
  busId: number;
  routeId: number;
  driverId: number;
  departureTime: string;
  actualDepartureTime?: string | null;
  actualArrivalTime?: string | null;
  price: number;
  status: 'scheduled' | 'completed' | 'cancelled' | 'delayed';
  isAutoGenerated: boolean;
  patternId?: number | null;
  createdAt: string;
  bus: {
    id: number;
    licensePlate: string;
    seatCount: number;
    description?: string;
    busType: {
      id?: number;
      name: string;
    };
  };
  route: {
    id: number;
    departureProvince: string;
    arrivalProvince: string;
    distanceKm?: number;
    estimatedTime?: number;
  };
  driver: {
    id: number;
    fullName: string;
    phoneNumber: string;
    licenseNumber?: string;
  };
  pattern?: {
    id: number;
    name: string;
  } | null;
}

export interface ScheduleFilters {
  routeId?: number;
  busId?: number;
  driverId?: number;
  status?: 'scheduled' | 'completed' | 'cancelled' | 'delayed';
  isAutoGenerated?: boolean;
  patternId?: number;
  departureDate?: string;
  startDate?: string;
  endDate?: string;
  search?: string;
  page?: number;
  limit?: number;
}

export interface CreateScheduleData {
  busId: number;
  routeId: number;
  driverId: number;
  departureTime: string;
  price: number;
  status?: 'scheduled' | 'completed' | 'cancelled' | 'delayed';
  patternId?: number;
}

export interface UpdateScheduleData {
  busId?: number;
  routeId?: number;
  driverId?: number;
  departureTime?: string;
  price?: number;
  status?: 'scheduled' | 'completed' | 'cancelled' | 'delayed';
  patternId?: number;
}

export interface BulkCreateScheduleData {
  patternId: number;
  startDate: string;
  endDate: string;
  busId?: number;
  driverId?: number;
  priceOverride?: number;
}

const scheduleService = {
  // Lấy danh sách lịch trình với filtering
  async getSchedules(filters: ScheduleFilters = {}): Promise<Schedule[]> {
    const params = new URLSearchParams();
    
    Object.entries(filters).forEach(([key, value]) => {
      if (value !== undefined && value !== null && value !== '') {
        params.append(key, value.toString());
      }
    });

    console.log('Token:', localStorage.getItem('token'));
    console.log('Request URL:', `/schedules?${params.toString()}`);
    
    const response = await adminApi.get<ApiResponse<Schedule[]>>(`/schedules?${params.toString()}`);
    console.log('API Response:', response.data);
    return response.data.data;
  },

  // Lấy thông tin lịch trình theo ID
  async getScheduleById(id: number): Promise<Schedule> {
    const response = await adminApi.get<ApiResponse<Schedule>>(`/schedules/${id}`);
    return response.data.data;
  },

  // Tạo lịch trình mới
  async createSchedule(data: CreateScheduleData): Promise<Schedule> {
    const response = await adminApi.post<ApiResponse<Schedule>>('/schedules', data);
    return response.data.data;
  },

  // Tạo nhiều lịch trình từ pattern
  async bulkCreateSchedules(data: BulkCreateScheduleData): Promise<{
    created: number;
    schedules: Schedule[];
    summary: {
      patternName: string;
      dateRange: string;
      totalDays: number;
      schedulesPerDay: number;
    };
  }> {
    const response = await adminApi.post<ApiResponse<{
      created: number;
      schedules: Schedule[];
      summary: {
        patternName: string;
        dateRange: string;
        totalDays: number;
        schedulesPerDay: number;
      };
    }>>('/schedules/bulk-create', data);
    return response.data.data;
  },

  // Cập nhật lịch trình
  async updateSchedule(id: number, data: UpdateScheduleData): Promise<Schedule> {
    const response = await adminApi.put<ApiResponse<Schedule>>(`/schedules/${id}`, data);
    return response.data.data;
  },

  // Xóa lịch trình
  async deleteSchedule(id: number): Promise<boolean> {
    const response = await adminApi.delete<ApiResponse<null>>(`/schedules/${id}`);
    return response.data.success;
  }
};

export default scheduleService; 