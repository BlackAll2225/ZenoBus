import adminApi from './adminApi';
import { ApiResponse, PaginatedResponse } from './types';
import { convertVNDateTimeToUTCString, convertVNDateToUTCString } from '../lib/dateUtils';

export interface Schedule {
  id: number;
  busId: number;
  routeId: number;
  driverId: number;
  departureTime: string; // UTC string from API
  actualDepartureTime?: string | null; // UTC string from API
  actualArrivalTime?: string | null; // UTC string from API
  price: number;
  status: 'scheduled' | 'completed' | 'cancelled' | 'delayed';
  isAutoGenerated: boolean;
  patternId?: number | null;
  createdAt: string; // UTC string from API
  bus: {
    id: number;
    licensePlate: string;
    seatCount: number;
    description?: string;
    busType: {
      id?: number;
      name: string;
    };
  };
  route: {
    id: number;
    departureProvince: string;
    arrivalProvince: string;
    distanceKm?: number;
    estimatedTime?: number;
  };
  driver: {
    id: number;
    fullName: string;
    phoneNumber: string;
    licenseNumber?: string;
  };
  pattern?: {
    id: number;
    name: string;
  } | null;
}

export interface ScheduleFilters {
  routeId?: number;
  busId?: number;
  driverId?: number;
  status?: 'scheduled' | 'completed' | 'cancelled' | 'delayed';
  isAutoGenerated?: boolean;
  patternId?: number;
  departureDate?: string; // VN date input, will be converted to UTC
  startDate?: string; // VN date input, will be converted to UTC
  endDate?: string; // VN date input, will be converted to UTC
  search?: string;
  page?: number;
  limit?: number;
}

export interface CreateScheduleData {
  busId: number;
  routeId: number;
  driverId: number;
  departureTime: string; // VN datetime input, will be converted to UTC
  price: number;
  status?: 'scheduled' | 'completed' | 'cancelled' | 'delayed';
  patternId?: number;
}

export interface UpdateScheduleData {
  busId?: number;
  routeId?: number;
  driverId?: number;
  departureTime?: string; // VN datetime input, will be converted to UTC
  price?: number;
  status?: 'scheduled' | 'completed' | 'cancelled' | 'delayed';
  patternId?: number;
}

export interface BulkCreateScheduleData {
  patternId: number;
  startDate: string; // VN date input, will be converted to UTC
  endDate: string; // VN date input, will be converted to UTC
  busId?: number;
  driverId?: number;
  priceOverride?: number;
}

const scheduleService = {
  // Lấy danh sách lịch trình với filtering
  async getSchedules(filters: ScheduleFilters = {}): Promise<Schedule[]> {
    // Convert VN dates to UTC for API
    const apiFilters = { ...filters };
    
    if (filters.departureDate) {
      apiFilters.departureDate = convertVNDateToUTCString(filters.departureDate);
    }
    if (filters.startDate) {
      apiFilters.startDate = convertVNDateToUTCString(filters.startDate);
    }
    if (filters.endDate) {
      apiFilters.endDate = convertVNDateToUTCString(filters.endDate);
    }
    
    const params = new URLSearchParams();
    
    Object.entries(apiFilters).forEach(([key, value]) => {
      if (value !== undefined && value !== null && value !== '') {
        params.append(key, value.toString());
      }
    });

    console.log('Token:', localStorage.getItem('token'));
    console.log('Request URL:', `/schedules?${params.toString()}`);
    console.log('Original filters:', filters);
    console.log('Converted API filters:', apiFilters);
    
    const response = await adminApi.get<ApiResponse<Schedule[]>>(`/schedules?${params.toString()}`);
    console.log('API Response:', response.data);
    return response.data.data;
  },

  // Lấy thông tin lịch trình theo ID
  async getScheduleById(id: number): Promise<Schedule> {
    const response = await adminApi.get<ApiResponse<Schedule>>(`/schedules/${id}`);
    return response.data.data;
  },

  // Tạo lịch trình mới
  async createSchedule(data: CreateScheduleData): Promise<Schedule> {
    // Convert VN datetime to UTC for API
    const apiData = {
      ...data,
      departureTime: convertVNDateTimeToUTCString(data.departureTime)
    };
    
    console.log('Original schedule data:', data);
    console.log('Converted API data:', apiData);
    
    const response = await adminApi.post<ApiResponse<Schedule>>('/schedules', apiData);
    return response.data.data;
  },

  // Tạo nhiều lịch trình từ pattern
  async bulkCreateSchedules(data: BulkCreateScheduleData): Promise<{
    created: number;
    schedules: Schedule[];
    summary: {
      patternName: string;
      dateRange: string;
      totalDays: number;
      schedulesPerDay: number;
    };
  }> {
    // Convert VN dates to UTC for API
    const apiData = {
      ...data,
      startDate: convertVNDateToUTCString(data.startDate),
      endDate: convertVNDateToUTCString(data.endDate)
    };
    
    console.log('Original bulk create data:', data);
    console.log('Converted API data:', apiData);
    
    const response = await adminApi.post<ApiResponse<{
      created: number;
      schedules: Schedule[];
      summary: {
        patternName: string;
        dateRange: string;
        totalDays: number;
        schedulesPerDay: number;
      };
    }>>('/schedules/bulk-create', apiData);
    return response.data.data;
  },

  // Cập nhật lịch trình
  async updateSchedule(id: number, data: UpdateScheduleData): Promise<Schedule> {
    // Convert VN datetime to UTC for API if provided
    const apiData = { ...data };
    if (data.departureTime) {
      apiData.departureTime = convertVNDateTimeToUTCString(data.departureTime);
    }
    
    console.log('Original update data:', data);
    console.log('Converted API data:', apiData);
    
    const response = await adminApi.put<ApiResponse<Schedule>>(`/schedules/${id}`, apiData);
    return response.data.data;
  },

  // Xóa lịch trình
  async deleteSchedule(id: number): Promise<boolean> {
    const response = await adminApi.delete<ApiResponse<null>>(`/schedules/${id}`);
    return response.data.success;
  }
};

export default scheduleService; 