const scheduleService = require('../services/scheduleService');
const ResponseHandler = require('../utils/responseHandler');

const scheduleController = {
  // Lấy danh sách lịch trình với filtering
  async getSchedules(req, res) {
    try {
      const filters = {
        routeId: req.query.routeId ? parseInt(req.query.routeId) : undefined,
        busId: req.query.busId ? parseInt(req.query.busId) : undefined,
        driverId: req.query.driverId ? parseInt(req.query.driverId) : undefined,
        status: req.query.status,
        isAutoGenerated: req.query.isAutoGenerated ? req.query.isAutoGenerated === 'true' : undefined,
        patternId: req.query.patternId ? parseInt(req.query.patternId) : undefined,
        departureDate: req.query.departureDate,
        startDate: req.query.startDate,
        endDate: req.query.endDate,
        search: req.query.search
      };

      const pagination = {
        page: parseInt(req.query.page) || 1,
        limit: parseInt(req.query.limit) || 20
      };

      const result = await scheduleService.getSchedules(filters, pagination);
      
      res.json(ResponseHandler.success(result.data, 'Lấy danh sách lịch trình thành công'));
    } catch (error) {
      console.error('Error in getSchedules:', error);
      res.status(500).json(ResponseHandler.error(error.message || 'Có lỗi xảy ra khi lấy danh sách lịch trình'));
    }
  },

  // Lấy thông tin lịch trình theo ID
  async getScheduleById(req, res) {
    try {
      const id = parseInt(req.params.id);
      if (!id) {
        return res.status(400).json(ResponseHandler.error('ID lịch trình không hợp lệ'));
      }

      const schedule = await scheduleService.getScheduleById(id);
      if (!schedule) {
        return res.status(404).json(ResponseHandler.notFound('Không tìm thấy lịch trình'));
      }

      res.json(ResponseHandler.success(schedule, 'Lấy thông tin lịch trình thành công'));
    } catch (error) {
      console.error('Error in getScheduleById:', error);
      res.status(500).json(ResponseHandler.error(error.message || 'Có lỗi xảy ra khi lấy thông tin lịch trình'));
    }
  },

  // Tạo lịch trình mới
  async createSchedule(req, res) {
    try {
      const scheduleData = {
        busId: req.body.busId,
        routeId: req.body.routeId,
        driverId: req.body.driverId,
        departureTime: req.body.departureTime,
        price: req.body.price,
        status: req.body.status || 'scheduled',
        patternId: req.body.patternId || null
      };

      // Validation
      if (!scheduleData.busId || !scheduleData.routeId || !scheduleData.driverId || 
          !scheduleData.departureTime || !scheduleData.price) {
        return res.status(400).json(ResponseHandler.error(`Thiếu thông tin bắt buộc: ${Object.keys(scheduleData).filter(key => !scheduleData[key]).join(', ')}`));
      }

      const schedule = await scheduleService.createSchedule(scheduleData);
      res.status(201).json(ResponseHandler.created(schedule, 'Tạo lịch trình thành công'));
    } catch (error) {
      console.error('Error in createSchedule:', error);
      
      // Enhanced error handling for validation errors
      if (error.message.includes('không tồn tại') || error.message.includes('không hoạt động')) {
        return res.status(400).json(ResponseHandler.error(error.message));
      }
      if (error.message.includes('trùng lặp') || error.message.includes('đã có lịch trình') || 
          error.message.includes('không thể di chuyển') || error.message.includes('cần nghỉ')) {
        return res.status(409).json(ResponseHandler.error(error.message));
      }
      if (error.message.includes('trong quá khứ') || error.message.includes('không hợp lệ')) {
        return res.status(400).json(ResponseHandler.error(error.message));
      }
      if (error.message.includes('thời gian')) {
        return res.status(400).json(ResponseHandler.error(error.message));
      }
      
      res.status(500).json(ResponseHandler.error(error.message || 'Có lỗi xảy ra khi tạo lịch trình'));
    }
  },

  // Tạo nhiều lịch trình từ pattern
  async bulkCreateSchedules(req, res) {
    try {
      const bulkData = {
        patternId: req.body.patternId,
        startDate: req.body.startDate,
        endDate: req.body.endDate,
        busId: req.body.busId || null,
        driverId: req.body.driverId || null,
        priceOverride: req.body.priceOverride || null
      };

      // Validation
      if (!bulkData.patternId || !bulkData.startDate || !bulkData.endDate) {
        return res.status(400).json(ResponseHandler.error('Thiếu thông tin bắt buộc: patternId, startDate, endDate'));
      }

      // Validate date format
      const startDate = new Date(bulkData.startDate);
      const endDate = new Date(bulkData.endDate);
      
      if (isNaN(startDate.getTime()) || isNaN(endDate.getTime())) {
        return res.status(400).json(ResponseHandler.error('Định dạng ngày không hợp lệ (YYYY-MM-DD)'));
      }

      if (startDate >= endDate) {
        return res.status(400).json(ResponseHandler.error('Ngày bắt đầu phải nhỏ hơn ngày kết thúc'));
      }

      const result = await scheduleService.bulkCreateSchedules(bulkData);
      
      // Handle partial success with some failures
      let message = 'Tạo lịch trình từ pattern thành công';
      if (result.failed > 0) {
        message = `Tạo thành công ${result.created}/${result.summary.totalAttempted} lịch trình. ${result.failed} lịch trình bị lỗi validation.`;
      }
      
      res.status(201).json(ResponseHandler.created(result, message));
    } catch (error) {
      console.error('Error in bulkCreateSchedules:', error);
      
      if (error.message.includes('không tồn tại')) {
        return res.status(404).json(ResponseHandler.notFound(error.message));
      }
      if (error.message.includes('không hoạt động')) {
        return res.status(400).json(ResponseHandler.error(error.message));
      }
      
      res.status(500).json(ResponseHandler.error(error.message || 'Có lỗi xảy ra khi tạo lịch trình từ pattern'));
    }
  },

  // Cập nhật lịch trình
  async updateSchedule(req, res) {
    try {
      const id = parseInt(req.params.id);
      if (!id) {
        return res.status(400).json(ResponseHandler.error('ID lịch trình không hợp lệ'));
      }

      const updateData = {
        busId: req.body.busId,
        routeId: req.body.routeId,
        driverId: req.body.driverId,
        departureTime: req.body.departureTime,
        price: req.body.price,
        status: req.body.status,
        patternId: req.body.patternId
      };

      // Remove undefined fields
      Object.keys(updateData).forEach(key => {
        if (updateData[key] === undefined) {
          delete updateData[key];
        }
      });

      const schedule = await scheduleService.updateSchedule(id, updateData);
      if (!schedule) {
        return res.status(404).json(ResponseHandler.notFound('Không tìm thấy lịch trình'));
      }

      res.json(ResponseHandler.success(schedule, 'Cập nhật lịch trình thành công'));
    } catch (error) {
      console.error('Error in updateSchedule:', error);
      
      // Use statusCode from error if available
      if (error.statusCode) {
        return res.status(error.statusCode).json(ResponseHandler.error(error.message));
      }
      
      // Enhanced error handling for validation errors (same as createSchedule)
      if (error.message.includes('không tồn tại') || error.message.includes('không hoạt động')) {
        return res.status(400).json(ResponseHandler.error(error.message));
      }
      if (error.message.includes('trùng lặp') || error.message.includes('đã có lịch trình') || 
          error.message.includes('không thể di chuyển') || error.message.includes('cần nghỉ')) {
        return res.status(409).json(ResponseHandler.error(error.message));
      }
      if (error.message.includes('trong quá khứ') || error.message.includes('không hợp lệ')) {
        return res.status(400).json(ResponseHandler.error(error.message));
      }
      if (error.message.includes('thời gian')) {
        return res.status(400).json(ResponseHandler.error(error.message));
      }
      
      res.status(500).json(ResponseHandler.error(error.message || 'Có lỗi xảy ra khi cập nhật lịch trình'));
    }
  },

  // Xóa lịch trình
  async deleteSchedule(req, res) {
    try {
      const id = parseInt(req.params.id);
      if (!id) {
        return res.status(400).json(ResponseHandler.error('ID lịch trình không hợp lệ'));
      }

      const deleted = await scheduleService.deleteSchedule(id);
      if (!deleted) {
        return res.status(404).json(ResponseHandler.notFound('Không tìm thấy lịch trình'));
      }

      res.json(ResponseHandler.success(null, 'Xóa lịch trình thành công'));
    } catch (error) {
      console.error('Error in deleteSchedule:', error);
      
      if (error.message.includes('có booking')) {
        return res.status(409).json(ResponseHandler.error(error.message));
      }
      
      res.status(500).json(ResponseHandler.error(error.message || 'Có lỗi xảy ra khi xóa lịch trình'));
    }
  }
};

module.exports = scheduleController;
