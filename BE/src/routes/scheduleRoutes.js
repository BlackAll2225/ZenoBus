const express = require('express');
const router = express.Router();
const scheduleController = require('../controllers/scheduleController');
const { requireAdminOrManager } = require('../middlewares/roleAuth');

/**
 * @swagger
 * components:
 *   schemas:
 *     Schedule:
 *       type: object
 *       properties:
 *         id:
 *           type: integer
 *           description: ID của lịch trình
 *         busId:
 *           type: integer
 *           description: ID xe bus
 *         routeId:
 *           type: integer
 *           description: ID tuyến đường
 *         driverId:
 *           type: integer
 *           description: ID tài xế
 *         departureTime:
 *           type: string
 *           format: date-time
 *           description: Thời gian khởi hành
 *         price:
 *           type: number
 *           format: decimal
 *           description: Giá vé
 *         status:
 *           type: string
 *           enum: [scheduled, completed, cancelled, delayed]
 *           description: Trạng thái lịch trình
 *         isAutoGenerated:
 *           type: boolean
 *           description: Lịch trình tự động tạo
 *         patternId:
 *           type: integer
 *           description: ID pattern (nếu auto-generated)
 *         createdAt:
 *           type: string
 *           format: date-time
 *         bus:
 *           type: object
 *           properties:
 *             id:
 *               type: integer
 *             licensePlate:
 *               type: string
 *             seatCount:
 *               type: integer
 *             busType:
 *               type: object
 *               properties:
 *                 id:
 *                   type: integer
 *                 name:
 *                   type: string
 *         route:
 *           type: object
 *           properties:
 *             id:
 *               type: integer
 *             departureProvince:
 *               type: string
 *             arrivalProvince:
 *               type: string
 *         driver:
 *           type: object
 *           properties:
 *             id:
 *               type: integer
 *             fullName:
 *               type: string
 *             phoneNumber:
 *               type: string
 *     
 *     ScheduleInput:
 *       type: object
 *       required:
 *         - busId
 *         - routeId
 *         - driverId
 *         - departureTime
 *         - price
 *       properties:
 *         busId:
 *           type: integer
 *         routeId:
 *           type: integer
 *         driverId:
 *           type: integer
 *         departureTime:
 *           type: string
 *           format: date-time
 *         price:
 *           type: number
 *           format: decimal
 *         status:
 *           type: string
 *           enum: [scheduled, completed, cancelled, delayed]
 *           default: scheduled
 *         patternId:
 *           type: integer
 *           description: ID pattern (nếu tạo từ pattern)
 *     
 *     BulkScheduleInput:
 *       type: object
 *       required:
 *         - patternId
 *         - startDate
 *         - endDate
 *       properties:
 *         patternId:
 *           type: integer
 *           description: ID của pattern để tạo schedules
 *         startDate:
 *           type: string
 *           format: date
 *           description: Ngày bắt đầu (YYYY-MM-DD)
 *         endDate:
 *           type: string
 *           format: date
 *           description: Ngày kết thúc (YYYY-MM-DD)
 *         busId:
 *           type: integer
 *           description: ID xe bus (optional, sẽ auto-assign nếu không có)
 *         driverId:
 *           type: integer
 *           description: ID tài xế (optional, sẽ auto-assign nếu không có)
 *         priceOverride:
 *           type: number
 *           format: decimal
 *           description: Ghi đè giá (optional, dùng basePrice từ pattern nếu không có)
 */

/**
 * @swagger
 * /api/schedules:
 *   get:
 *     summary: Lấy danh sách lịch trình với filtering
 *     tags: [Schedules]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: query
 *         name: routeId
 *         schema:
 *           type: integer
 *         description: Filter theo tuyến đường
 *       - in: query
 *         name: busId
 *         schema:
 *           type: integer
 *         description: Filter theo xe bus
 *       - in: query
 *         name: driverId
 *         schema:
 *           type: integer
 *         description: Filter theo tài xế
 *       - in: query
 *         name: status
 *         schema:
 *           type: string
 *           enum: [scheduled, completed, cancelled, delayed]
 *         description: Filter theo trạng thái
 *       - in: query
 *         name: isAutoGenerated
 *         schema:
 *           type: boolean
 *         description: Filter theo lịch trình tự động
 *       - in: query
 *         name: patternId
 *         schema:
 *           type: integer
 *         description: Filter theo pattern
 *       - in: query
 *         name: departureDate
 *         schema:
 *           type: string
 *           format: date
 *         description: Filter theo ngày khởi hành (YYYY-MM-DD)
 *       - in: query
 *         name: startDate
 *         schema:
 *           type: string
 *           format: date
 *         description: Ngày bắt đầu range (YYYY-MM-DD)
 *       - in: query
 *         name: endDate
 *         schema:
 *           type: string
 *           format: date
 *         description: Ngày kết thúc range (YYYY-MM-DD)
 *       - in: query
 *         name: page
 *         schema:
 *           type: integer
 *           default: 1
 *         description: Số trang
 *       - in: query
 *         name: limit
 *         schema:
 *           type: integer
 *           default: 20
 *         description: Số lượng mỗi trang
 *       - in: query
 *         name: search
 *         schema:
 *           type: string
 *         description: Tìm kiếm theo tên tuyến đường, biển số xe
 *     responses:
 *       200:
 *         description: Danh sách lịch trình
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 success:
 *                   type: boolean
 *                 data:
 *                   type: array
 *                   items:
 *                     $ref: '#/components/schemas/Schedule'
 *                 pagination:
 *                   type: object
 *                   properties:
 *                     page:
 *                       type: integer
 *                     limit:
 *                       type: integer
 *                     total:
 *                       type: integer
 *                     totalPages:
 *                       type: integer
 *       401:
 *         description: Unauthorized
 *       500:
 *         description: Server error
 */
router.get('/', requireAdminOrManager, scheduleController.getSchedules);

/**
 * @swagger
 * /api/schedules/{id}:
 *   get:
 *     summary: Lấy thông tin lịch trình theo ID
 *     tags: [Schedules]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: integer
 *         description: ID lịch trình
 *     responses:
 *       200:
 *         description: Thông tin lịch trình
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 success:
 *                   type: boolean
 *                 data:
 *                   $ref: '#/components/schemas/Schedule'
 *       404:
 *         description: Không tìm thấy lịch trình
 *       401:
 *         description: Unauthorized
 *       500:
 *         description: Server error
 */
router.get('/:id', requireAdminOrManager, scheduleController.getScheduleById);

/**
 * @swagger
 * /api/schedules:
 *   post:
 *     summary: Tạo lịch trình mới
 *     tags: [Schedules]
 *     security:
 *       - bearerAuth: []
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             $ref: '#/components/schemas/ScheduleInput'
 *     responses:
 *       201:
 *         description: Lịch trình được tạo thành công
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 success:
 *                   type: boolean
 *                 data:
 *                   $ref: '#/components/schemas/Schedule'
 *       400:
 *         description: Dữ liệu không hợp lệ
 *       401:
 *         description: Unauthorized
 *       500:
 *         description: Server error
 */
router.post('/', requireAdminOrManager, scheduleController.createSchedule);

/**
 * @swagger
 * /api/schedules/bulk-create:
 *   post:
 *     summary: Tạo nhiều lịch trình từ pattern
 *     tags: [Schedules]
 *     security:
 *       - bearerAuth: []
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             $ref: '#/components/schemas/BulkScheduleInput'
 *     responses:
 *       201:
 *         description: Lịch trình được tạo thành công
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 success:
 *                   type: boolean
 *                 data:
 *                   type: object
 *                   properties:
 *                     created:
 *                       type: integer
 *                       description: Số lượng lịch trình đã tạo
 *                     schedules:
 *                       type: array
 *                       items:
 *                         $ref: '#/components/schemas/Schedule'
 *                     summary:
 *                       type: object
 *                       properties:
 *                         patternName:
 *                           type: string
 *                         dateRange:
 *                           type: string
 *                         totalDays:
 *                           type: integer
 *                         schedulesPerDay:
 *                           type: integer
 *       400:
 *         description: Dữ liệu không hợp lệ
 *       404:
 *         description: Không tìm thấy pattern
 *       401:
 *         description: Unauthorized
 *       500:
 *         description: Server error
 */
router.post('/bulk-create', requireAdminOrManager, scheduleController.bulkCreateSchedules);

/**
 * @swagger
 * /api/schedules/{id}:
 *   put:
 *     summary: Cập nhật lịch trình
 *     tags: [Schedules]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: integer
 *         description: ID lịch trình
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             $ref: '#/components/schemas/ScheduleInput'
 *     responses:
 *       200:
 *         description: Lịch trình được cập nhật thành công
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 success:
 *                   type: boolean
 *                 data:
 *                   $ref: '#/components/schemas/Schedule'
 *       404:
 *         description: Không tìm thấy lịch trình
 *       400:
 *         description: Dữ liệu không hợp lệ
 *       401:
 *         description: Unauthorized
 *       500:
 *         description: Server error
 */
router.put('/:id', requireAdminOrManager, scheduleController.updateSchedule);

/**
 * @swagger
 * /api/schedules/{id}:
 *   delete:
 *     summary: Xóa lịch trình
 *     tags: [Schedules]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: integer
 *         description: ID lịch trình
 *     responses:
 *       200:
 *         description: Lịch trình được xóa thành công
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 success:
 *                   type: boolean
 *                 message:
 *                   type: string
 *       404:
 *         description: Không tìm thấy lịch trình
 *       409:
 *         description: Không thể xóa lịch trình có booking
 *       401:
 *         description: Unauthorized
 *       500:
 *         description: Server error
 */
router.delete('/:id', requireAdminOrManager, scheduleController.deleteSchedule);

module.exports = router;
